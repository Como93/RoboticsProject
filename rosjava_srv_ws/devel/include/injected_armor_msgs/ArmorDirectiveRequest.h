// Generated by gencpp from file injected_armor_msgs/ArmorDirectiveRequest.msg
// DO NOT EDIT!


#ifndef INJECTED_ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQUEST_H
#define INJECTED_ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <injected_armor_msgs/ArmorDirectiveReq.h>

namespace injected_armor_msgs
{
template <class ContainerAllocator>
struct ArmorDirectiveRequest_
{
  typedef ArmorDirectiveRequest_<ContainerAllocator> Type;

  ArmorDirectiveRequest_()
    : armor_request()  {
    }
  ArmorDirectiveRequest_(const ContainerAllocator& _alloc)
    : armor_request(_alloc)  {
  (void)_alloc;
    }



   typedef  ::injected_armor_msgs::ArmorDirectiveReq_<ContainerAllocator>  _armor_request_type;
  _armor_request_type armor_request;





  typedef boost::shared_ptr< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ArmorDirectiveRequest_

typedef ::injected_armor_msgs::ArmorDirectiveRequest_<std::allocator<void> > ArmorDirectiveRequest;

typedef boost::shared_ptr< ::injected_armor_msgs::ArmorDirectiveRequest > ArmorDirectiveRequestPtr;
typedef boost::shared_ptr< ::injected_armor_msgs::ArmorDirectiveRequest const> ArmorDirectiveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace injected_armor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'injected_armor_msgs': ['/home/ros/rosjava_srv_ws/src/project/injected_armor_pkgs/injected_armor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dd786c47e3f813a5233dff98bbcad0d";
  }

  static const char* value(const ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dd786c47e3f813aULL;
  static const uint64_t static_value2 = 0x5233dff98bbcad0dULL;
};

template<class ContainerAllocator>
struct DataType< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "injected_armor_msgs/ArmorDirectiveRequest";
  }

  static const char* value(const ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ArmorDirectiveReq armor_request\n\
\n\
================================================================================\n\
MSG: injected_armor_msgs/ArmorDirectiveReq\n\
string client_name\n\
string reference_name\n\
string command\n\
string primary_command_spec\n\
string secondary_command_spec\n\
string[] args\n\
";
  }

  static const char* value(const ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.armor_request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmorDirectiveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::injected_armor_msgs::ArmorDirectiveRequest_<ContainerAllocator>& v)
  {
    s << indent << "armor_request: ";
    s << std::endl;
    Printer< ::injected_armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >::stream(s, indent + "  ", v.armor_request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INJECTED_ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQUEST_H
